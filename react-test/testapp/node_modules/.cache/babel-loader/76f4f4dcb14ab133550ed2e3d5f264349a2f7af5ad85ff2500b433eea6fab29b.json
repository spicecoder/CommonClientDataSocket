{"ast":null,"code":"// WebSocketDataClient.js - Universal Data Access Client\nclass WebSocketDataClient {\n  constructor(options = {}) {\n    this.serverUrl = options.serverUrl || 'ws://localhost:8081';\n    this.platform = options.platform || this.detectPlatform();\n    this.reconnectInterval = options.reconnectInterval || 5000;\n    this.maxReconnectAttempts = options.maxReconnectAttempts || 10;\n    this.ws = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.pendingRequests = new Map();\n    this.subscriptions = new Map();\n    this.eventListeners = new Map();\n    this.requestId = 0;\n\n    // Platform-specific WebSocket implementation\n    this.WebSocketImpl = this.getWebSocketImplementation();\n    console.log(`🔌 WebSocket Data Client initialized for platform: ${this.platform}`);\n  }\n  detectPlatform() {\n    // React Native detection\n    if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n      return 'react-native';\n    }\n\n    // Browser detection\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      return 'browser';\n    }\n\n    // Node.js detection\n    return 'nodejs';\n  }\n  getWebSocketImplementation() {\n    switch (this.platform) {\n      case 'react-native':\n        // React Native has built-in WebSocket\n        return WebSocket;\n      case 'browser':\n        // Browser native WebSocket\n        return WebSocket;\n      case 'nodejs':\n        // Node.js requires ws package\n        try {\n          return require('ws');\n        } catch (error) {\n          throw new Error('WebSocket package not found. Install with: npm install ws');\n        }\n      default:\n        throw new Error(`Unsupported platform: ${this.platform}`);\n    }\n  }\n  async connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        console.log(`🔄 Connecting to WebSocket server: ${this.serverUrl}`);\n        const headers = {\n          'x-platform': this.platform,\n          'User-Agent': this.getUserAgent()\n        };\n        this.ws = new this.WebSocketImpl(this.serverUrl, [], {\n          headers\n        });\n        const connectTimeout = setTimeout(() => {\n          reject(new Error('Connection timeout'));\n        }, 10000);\n        this.ws.onopen = event => {\n          clearTimeout(connectTimeout);\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          console.log('✅ Connected to WebSocket Data Server');\n          this.emit('connected', {\n            platform: this.platform\n          });\n          resolve(true);\n        };\n        this.ws.onmessage = event => {\n          this.handleMessage(event.data);\n        };\n        this.ws.onclose = event => {\n          this.isConnected = false;\n          console.log(`🔌 WebSocket connection closed: ${event.code} - ${event.reason}`);\n          this.emit('disconnected', {\n            code: event.code,\n            reason: event.reason\n          });\n\n          // Auto-reconnect if not intentional close\n          if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.attemptReconnect();\n          }\n        };\n        this.ws.onerror = error => {\n          clearTimeout(connectTimeout);\n          console.error('❌ WebSocket error:', error);\n          this.emit('error', error);\n          reject(error);\n        };\n      } catch (error) {\n        console.error('💥 Failed to create WebSocket connection:', error);\n        reject(error);\n      }\n    });\n  }\n  getUserAgent() {\n    switch (this.platform) {\n      case 'react-native':\n        return 'React Native WebSocket Data Client/1.0';\n      case 'browser':\n        return navigator.userAgent + ' WebSocketDataClient/1.0';\n      case 'nodejs':\n        return 'Node.js WebSocket Data Client/1.0';\n      default:\n        return 'WebSocket Data Client/1.0';\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('💀 Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = this.reconnectInterval * Math.pow(1.5, this.reconnectAttempts - 1);\n    console.log(`🔄 Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    setTimeout(() => {\n      this.connect().catch(error => {\n        console.error('Reconnection failed:', error);\n      });\n    }, delay);\n  }\n  handleMessage(data) {\n    try {\n      const message = JSON.parse(data);\n      const {\n        type,\n        requestId,\n        success,\n        data: responseData,\n        error\n      } = message;\n      switch (type) {\n        case 'CONNECTION_ESTABLISHED':\n          this.handleConnectionEstablished(message);\n          break;\n        case 'SUBSCRIPTION_UPDATE':\n          this.handleSubscriptionUpdate(message);\n          break;\n        case 'ERROR':\n          this.handleError(requestId, error);\n          break;\n        default:\n          // Handle response to a pending request\n          if (requestId && this.pendingRequests.has(requestId)) {\n            const {\n              resolve,\n              reject\n            } = this.pendingRequests.get(requestId);\n            this.pendingRequests.delete(requestId);\n            if (success) {\n              resolve(responseData);\n            } else {\n              reject(new Error(error || 'Request failed'));\n            }\n          }\n          break;\n      }\n    } catch (error) {\n      console.error('📨 Error parsing WebSocket message:', error);\n    }\n  }\n  handleConnectionEstablished(message) {\n    console.log('🎉 Connection established:', message);\n    this.clientId = message.clientId;\n    this.platformCapabilities = message.capabilities;\n    this.emit('ready', message);\n  }\n  handleSubscriptionUpdate(message) {\n    const {\n      collection,\n      key,\n      operation,\n      value\n    } = message;\n    const subscriptionKey = `${collection}:${key}`;\n    const wildcardKey = `${collection}:*`;\n\n    // Notify specific subscription\n    if (this.subscriptions.has(subscriptionKey)) {\n      const callback = this.subscriptions.get(subscriptionKey);\n      callback({\n        collection,\n        key,\n        operation,\n        value,\n        type: 'specific'\n      });\n    }\n\n    // Notify wildcard subscription\n    if (this.subscriptions.has(wildcardKey)) {\n      const callback = this.subscriptions.get(wildcardKey);\n      callback({\n        collection,\n        key,\n        operation,\n        value,\n        type: 'wildcard'\n      });\n    }\n    this.emit('dataUpdate', {\n      collection,\n      key,\n      operation,\n      value\n    });\n  }\n  handleError(requestId, error) {\n    if (requestId && this.pendingRequests.has(requestId)) {\n      const {\n        reject\n      } = this.pendingRequests.get(requestId);\n      this.pendingRequests.delete(requestId);\n      reject(new Error(error));\n    } else {\n      console.error('🚨 WebSocket error:', error);\n      this.emit('error', new Error(error));\n    }\n  }\n  sendMessage(type, payload) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('WebSocket not connected'));\n        return;\n      }\n      const requestId = ++this.requestId;\n      const message = {\n        type,\n        requestId,\n        payload,\n        timestamp: Date.now()\n      };\n\n      // Store pending request\n      this.pendingRequests.set(requestId, {\n        resolve,\n        reject\n      });\n\n      // Set timeout for request\n      setTimeout(() => {\n        if (this.pendingRequests.has(requestId)) {\n          this.pendingRequests.delete(requestId);\n          reject(new Error('Request timeout'));\n        }\n      }, 30000);\n      try {\n        this.ws.send(JSON.stringify(message));\n      } catch (error) {\n        this.pendingRequests.delete(requestId);\n        reject(error);\n      }\n    });\n  }\n\n  // ===============================\n  // PUBLIC API METHODS\n  // ===============================\n\n  /**\n   * Get data from storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {object} options - Storage options\n   */\n  async get(collection, key, options = {}) {\n    return this.sendMessage('GET', {\n      collection,\n      key,\n      options\n    });\n  }\n\n  /**\n   * Set data in storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {any} value - Data value\n   * @param {object} options - Storage options\n   */\n  async set(collection, key, value, options = {}) {\n    return this.sendMessage('SET', {\n      collection,\n      key,\n      value,\n      options\n    });\n  }\n\n  /**\n   * Delete data from storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {object} options - Storage options\n   */\n  async delete(collection, key, options = {}) {\n    return this.sendMessage('DELETE', {\n      collection,\n      key,\n      options\n    });\n  }\n\n  /**\n   * Query data from storage\n   * @param {string} collection - Collection name\n   * @param {object} query - Query object\n   * @param {object} options - Query options\n   */\n  async query(collection, query, options = {}) {\n    return this.sendMessage('QUERY', {\n      collection,\n      query,\n      options\n    });\n  }\n\n  /**\n   * Execute batch operations\n   * @param {Array} operations - Array of operations\n   */\n  async batch(operations) {\n    return this.sendMessage('BATCH', {\n      operations\n    });\n  }\n\n  /**\n   * Subscribe to data changes\n   * @param {string} collection - Collection name\n   * @param {string} pattern - Key pattern (* for all)\n   * @param {function} callback - Callback function\n   */\n  async subscribe(collection, pattern, callback) {\n    const subscriptionKey = `${collection}:${pattern}`;\n    if (this.subscriptions.has(subscriptionKey)) {\n      throw new Error(`Already subscribed to ${subscriptionKey}`);\n    }\n    this.subscriptions.set(subscriptionKey, callback);\n    try {\n      await this.sendMessage('SUBSCRIBE', {\n        collection,\n        pattern\n      });\n      console.log(`🔔 Subscribed to: ${subscriptionKey}`);\n      return subscriptionKey;\n    } catch (error) {\n      this.subscriptions.delete(subscriptionKey);\n      throw error;\n    }\n  }\n\n  /**\n   * Unsubscribe from data changes\n   * @param {string} collection - Collection name\n   * @param {string} pattern - Key pattern\n   */\n  async unsubscribe(collection, pattern) {\n    const subscriptionKey = `${collection}:${pattern}`;\n    if (!this.subscriptions.has(subscriptionKey)) {\n      throw new Error(`Not subscribed to ${subscriptionKey}`);\n    }\n    this.subscriptions.delete(subscriptionKey);\n    try {\n      await this.sendMessage('UNSUBSCRIBE', {\n        collection,\n        pattern\n      });\n      console.log(`🔕 Unsubscribed from: ${subscriptionKey}`);\n      return true;\n    } catch (error) {\n      // Re-add subscription if unsubscribe failed\n      this.subscriptions.set(subscriptionKey, () => {});\n      throw error;\n    }\n  }\n\n  /**\n   * Ping server\n   */\n  async ping() {\n    const start = Date.now();\n    await this.sendMessage('PING', {});\n    const end = Date.now();\n    return end - start; // Return latency in milliseconds\n  }\n\n  // ===============================\n  // CONVENIENCE METHODS\n  // ===============================\n\n  /**\n   * Store cart data (convenience method)\n   */\n  async saveCart(userId, cartData) {\n    return this.set('cart', userId, cartData, {\n      useIndexedDB: this.platform === 'browser'\n    });\n  }\n\n  /**\n   * Load cart data (convenience method)\n   */\n  async loadCart(userId) {\n    return this.get('cart', userId, {\n      useIndexedDB: this.platform === 'browser'\n    });\n  }\n\n  /**\n   * Store user session (convenience method)\n   */\n  async saveUserSession(userId, sessionData) {\n    return this.set('sessions', userId, sessionData);\n  }\n\n  /**\n   * Load user session (convenience method)\n   */\n  async loadUserSession(userId) {\n    return this.get('sessions', userId);\n  }\n\n  /**\n   * Store chat messages (convenience method)\n   */\n  async saveChatMessages(roomId, messages) {\n    return this.set('chats', roomId, messages, {\n      useIndexedDB: this.platform === 'browser',\n      useSQLite: this.platform === 'react-native'\n    });\n  }\n\n  /**\n   * Load chat messages (convenience method)\n   */\n  async loadChatMessages(roomId) {\n    return this.get('chats', roomId, {\n      useIndexedDB: this.platform === 'browser',\n      useSQLite: this.platform === 'react-native'\n    });\n  }\n\n  // ===============================\n  // EVENT HANDLING\n  // ===============================\n\n  on(event, listener) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(listener);\n  }\n  off(event, listener) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // ===============================\n  // LIFECYCLE METHODS\n  // ===============================\n\n  disconnect() {\n    if (this.ws) {\n      this.isConnected = false;\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n      console.log('👋 Disconnected from WebSocket Data Server');\n    }\n  }\n  isReady() {\n    return this.isConnected && this.clientId;\n  }\n  getStatus() {\n    return {\n      connected: this.isConnected,\n      clientId: this.clientId,\n      platform: this.platform,\n      capabilities: this.platformCapabilities,\n      subscriptions: Array.from(this.subscriptions.keys()),\n      pendingRequests: this.pendingRequests.size\n    };\n  }\n}\n\n// ===============================\n// PLATFORM-SPECIFIC EXPORTS\n// ===============================\n\n// React/React Native ES6 export\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WebSocketDataClient;\n}\n\n// Browser AMD/UMD support\nif (typeof define === 'function' && define.amd) {\n  define([], function () {\n    return WebSocketDataClient;\n  });\n}\n\n// Browser global\nif (typeof window !== 'undefined') {\n  window.WebSocketDataClient = WebSocketDataClient;\n}\n\n// Note: For React Native/ES6 projects, you can use:\n// import WebSocketDataClient from './WebSocketDataClient';","map":{"version":3,"names":["WebSocketDataClient","constructor","options","serverUrl","platform","detectPlatform","reconnectInterval","maxReconnectAttempts","ws","isConnected","reconnectAttempts","pendingRequests","Map","subscriptions","eventListeners","requestId","WebSocketImpl","getWebSocketImplementation","console","log","navigator","product","window","document","WebSocket","require","error","Error","connect","Promise","resolve","reject","headers","getUserAgent","connectTimeout","setTimeout","onopen","event","clearTimeout","emit","onmessage","handleMessage","data","onclose","code","reason","attemptReconnect","onerror","userAgent","delay","Math","pow","catch","message","JSON","parse","type","success","responseData","handleConnectionEstablished","handleSubscriptionUpdate","handleError","has","get","delete","clientId","platformCapabilities","capabilities","collection","key","operation","value","subscriptionKey","wildcardKey","callback","sendMessage","payload","timestamp","Date","now","set","send","stringify","query","batch","operations","subscribe","pattern","unsubscribe","ping","start","end","saveCart","userId","cartData","useIndexedDB","loadCart","saveUserSession","sessionData","loadUserSession","saveChatMessages","roomId","messages","useSQLite","loadChatMessages","on","listener","push","off","listeners","index","indexOf","splice","forEach","disconnect","close","isReady","getStatus","connected","Array","from","keys","size","module","exports","define","amd"],"sources":["/Users/pronabpal/QuickLab/praxis-hub-demo/ClientServer_Pulse/jsoncpux-runtime-core-updated/forclaude-enhanced/Algebraic_IntentionSpace/WebSocketDataRepo/react-test/testapp/src/websocket_data_client.js"],"sourcesContent":["// WebSocketDataClient.js - Universal Data Access Client\nclass WebSocketDataClient {\n  constructor(options = {}) {\n    this.serverUrl = options.serverUrl || 'ws://localhost:8081';\n    this.platform = options.platform || this.detectPlatform();\n    this.reconnectInterval = options.reconnectInterval || 5000;\n    this.maxReconnectAttempts = options.maxReconnectAttempts || 10;\n    \n    this.ws = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.pendingRequests = new Map();\n    this.subscriptions = new Map();\n    this.eventListeners = new Map();\n    this.requestId = 0;\n    \n    // Platform-specific WebSocket implementation\n    this.WebSocketImpl = this.getWebSocketImplementation();\n    \n    console.log(`🔌 WebSocket Data Client initialized for platform: ${this.platform}`);\n  }\n\n  detectPlatform() {\n    // React Native detection\n    if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n      return 'react-native';\n    }\n    \n    // Browser detection\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      return 'browser';\n    }\n    \n    // Node.js detection\n    return 'nodejs';\n  }\n\n  getWebSocketImplementation() {\n    switch (this.platform) {\n      case 'react-native':\n        // React Native has built-in WebSocket\n        return WebSocket;\n      \n      case 'browser':\n        // Browser native WebSocket\n        return WebSocket;\n      \n      case 'nodejs':\n        // Node.js requires ws package\n        try {\n          return require('ws');\n        } catch (error) {\n          throw new Error('WebSocket package not found. Install with: npm install ws');\n        }\n      \n      default:\n        throw new Error(`Unsupported platform: ${this.platform}`);\n    }\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        console.log(`🔄 Connecting to WebSocket server: ${this.serverUrl}`);\n        \n        const headers = {\n          'x-platform': this.platform,\n          'User-Agent': this.getUserAgent()\n        };\n\n        this.ws = new this.WebSocketImpl(this.serverUrl, [], { headers });\n\n        const connectTimeout = setTimeout(() => {\n          reject(new Error('Connection timeout'));\n        }, 10000);\n\n        this.ws.onopen = (event) => {\n          clearTimeout(connectTimeout);\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          console.log('✅ Connected to WebSocket Data Server');\n          \n          this.emit('connected', { platform: this.platform });\n          resolve(true);\n        };\n\n        this.ws.onmessage = (event) => {\n          this.handleMessage(event.data);\n        };\n\n        this.ws.onclose = (event) => {\n          this.isConnected = false;\n          console.log(`🔌 WebSocket connection closed: ${event.code} - ${event.reason}`);\n          \n          this.emit('disconnected', { code: event.code, reason: event.reason });\n          \n          // Auto-reconnect if not intentional close\n          if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.attemptReconnect();\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          clearTimeout(connectTimeout);\n          console.error('❌ WebSocket error:', error);\n          this.emit('error', error);\n          reject(error);\n        };\n\n      } catch (error) {\n        console.error('💥 Failed to create WebSocket connection:', error);\n        reject(error);\n      }\n    });\n  }\n\n  getUserAgent() {\n    switch (this.platform) {\n      case 'react-native':\n        return 'React Native WebSocket Data Client/1.0';\n      case 'browser':\n        return navigator.userAgent + ' WebSocketDataClient/1.0';\n      case 'nodejs':\n        return 'Node.js WebSocket Data Client/1.0';\n      default:\n        return 'WebSocket Data Client/1.0';\n    }\n  }\n\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('💀 Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.reconnectInterval * Math.pow(1.5, this.reconnectAttempts - 1);\n    \n    console.log(`🔄 Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    \n    setTimeout(() => {\n      this.connect().catch(error => {\n        console.error('Reconnection failed:', error);\n      });\n    }, delay);\n  }\n\n  handleMessage(data) {\n    try {\n      const message = JSON.parse(data);\n      const { type, requestId, success, data: responseData, error } = message;\n\n      switch (type) {\n        case 'CONNECTION_ESTABLISHED':\n          this.handleConnectionEstablished(message);\n          break;\n\n        case 'SUBSCRIPTION_UPDATE':\n          this.handleSubscriptionUpdate(message);\n          break;\n\n        case 'ERROR':\n          this.handleError(requestId, error);\n          break;\n\n        default:\n          // Handle response to a pending request\n          if (requestId && this.pendingRequests.has(requestId)) {\n            const { resolve, reject } = this.pendingRequests.get(requestId);\n            this.pendingRequests.delete(requestId);\n\n            if (success) {\n              resolve(responseData);\n            } else {\n              reject(new Error(error || 'Request failed'));\n            }\n          }\n          break;\n      }\n    } catch (error) {\n      console.error('📨 Error parsing WebSocket message:', error);\n    }\n  }\n\n  handleConnectionEstablished(message) {\n    console.log('🎉 Connection established:', message);\n    this.clientId = message.clientId;\n    this.platformCapabilities = message.capabilities;\n    this.emit('ready', message);\n  }\n\n  handleSubscriptionUpdate(message) {\n    const { collection, key, operation, value } = message;\n    const subscriptionKey = `${collection}:${key}`;\n    const wildcardKey = `${collection}:*`;\n\n    // Notify specific subscription\n    if (this.subscriptions.has(subscriptionKey)) {\n      const callback = this.subscriptions.get(subscriptionKey);\n      callback({ collection, key, operation, value, type: 'specific' });\n    }\n\n    // Notify wildcard subscription\n    if (this.subscriptions.has(wildcardKey)) {\n      const callback = this.subscriptions.get(wildcardKey);\n      callback({ collection, key, operation, value, type: 'wildcard' });\n    }\n\n    this.emit('dataUpdate', { collection, key, operation, value });\n  }\n\n  handleError(requestId, error) {\n    if (requestId && this.pendingRequests.has(requestId)) {\n      const { reject } = this.pendingRequests.get(requestId);\n      this.pendingRequests.delete(requestId);\n      reject(new Error(error));\n    } else {\n      console.error('🚨 WebSocket error:', error);\n      this.emit('error', new Error(error));\n    }\n  }\n\n  sendMessage(type, payload) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('WebSocket not connected'));\n        return;\n      }\n\n      const requestId = ++this.requestId;\n      const message = {\n        type,\n        requestId,\n        payload,\n        timestamp: Date.now()\n      };\n\n      // Store pending request\n      this.pendingRequests.set(requestId, { resolve, reject });\n\n      // Set timeout for request\n      setTimeout(() => {\n        if (this.pendingRequests.has(requestId)) {\n          this.pendingRequests.delete(requestId);\n          reject(new Error('Request timeout'));\n        }\n      }, 30000);\n\n      try {\n        this.ws.send(JSON.stringify(message));\n      } catch (error) {\n        this.pendingRequests.delete(requestId);\n        reject(error);\n      }\n    });\n  }\n\n  // ===============================\n  // PUBLIC API METHODS\n  // ===============================\n\n  /**\n   * Get data from storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {object} options - Storage options\n   */\n  async get(collection, key, options = {}) {\n    return this.sendMessage('GET', { collection, key, options });\n  }\n\n  /**\n   * Set data in storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {any} value - Data value\n   * @param {object} options - Storage options\n   */\n  async set(collection, key, value, options = {}) {\n    return this.sendMessage('SET', { collection, key, value, options });\n  }\n\n  /**\n   * Delete data from storage\n   * @param {string} collection - Collection name\n   * @param {string} key - Data key\n   * @param {object} options - Storage options\n   */\n  async delete(collection, key, options = {}) {\n    return this.sendMessage('DELETE', { collection, key, options });\n  }\n\n  /**\n   * Query data from storage\n   * @param {string} collection - Collection name\n   * @param {object} query - Query object\n   * @param {object} options - Query options\n   */\n  async query(collection, query, options = {}) {\n    return this.sendMessage('QUERY', { collection, query, options });\n  }\n\n  /**\n   * Execute batch operations\n   * @param {Array} operations - Array of operations\n   */\n  async batch(operations) {\n    return this.sendMessage('BATCH', { operations });\n  }\n\n  /**\n   * Subscribe to data changes\n   * @param {string} collection - Collection name\n   * @param {string} pattern - Key pattern (* for all)\n   * @param {function} callback - Callback function\n   */\n  async subscribe(collection, pattern, callback) {\n    const subscriptionKey = `${collection}:${pattern}`;\n    \n    if (this.subscriptions.has(subscriptionKey)) {\n      throw new Error(`Already subscribed to ${subscriptionKey}`);\n    }\n\n    this.subscriptions.set(subscriptionKey, callback);\n    \n    try {\n      await this.sendMessage('SUBSCRIBE', { collection, pattern });\n      console.log(`🔔 Subscribed to: ${subscriptionKey}`);\n      return subscriptionKey;\n    } catch (error) {\n      this.subscriptions.delete(subscriptionKey);\n      throw error;\n    }\n  }\n\n  /**\n   * Unsubscribe from data changes\n   * @param {string} collection - Collection name\n   * @param {string} pattern - Key pattern\n   */\n  async unsubscribe(collection, pattern) {\n    const subscriptionKey = `${collection}:${pattern}`;\n    \n    if (!this.subscriptions.has(subscriptionKey)) {\n      throw new Error(`Not subscribed to ${subscriptionKey}`);\n    }\n\n    this.subscriptions.delete(subscriptionKey);\n    \n    try {\n      await this.sendMessage('UNSUBSCRIBE', { collection, pattern });\n      console.log(`🔕 Unsubscribed from: ${subscriptionKey}`);\n      return true;\n    } catch (error) {\n      // Re-add subscription if unsubscribe failed\n      this.subscriptions.set(subscriptionKey, () => {});\n      throw error;\n    }\n  }\n\n  /**\n   * Ping server\n   */\n  async ping() {\n    const start = Date.now();\n    await this.sendMessage('PING', {});\n    const end = Date.now();\n    return end - start; // Return latency in milliseconds\n  }\n\n  // ===============================\n  // CONVENIENCE METHODS\n  // ===============================\n\n  /**\n   * Store cart data (convenience method)\n   */\n  async saveCart(userId, cartData) {\n    return this.set('cart', userId, cartData, { \n      useIndexedDB: this.platform === 'browser' \n    });\n  }\n\n  /**\n   * Load cart data (convenience method)\n   */\n  async loadCart(userId) {\n    return this.get('cart', userId, { \n      useIndexedDB: this.platform === 'browser' \n    });\n  }\n\n  /**\n   * Store user session (convenience method)\n   */\n  async saveUserSession(userId, sessionData) {\n    return this.set('sessions', userId, sessionData);\n  }\n\n  /**\n   * Load user session (convenience method)\n   */\n  async loadUserSession(userId) {\n    return this.get('sessions', userId);\n  }\n\n  /**\n   * Store chat messages (convenience method)\n   */\n  async saveChatMessages(roomId, messages) {\n    return this.set('chats', roomId, messages, {\n      useIndexedDB: this.platform === 'browser',\n      useSQLite: this.platform === 'react-native'\n    });\n  }\n\n  /**\n   * Load chat messages (convenience method)\n   */\n  async loadChatMessages(roomId) {\n    return this.get('chats', roomId, {\n      useIndexedDB: this.platform === 'browser',\n      useSQLite: this.platform === 'react-native'\n    });\n  }\n\n  // ===============================\n  // EVENT HANDLING\n  // ===============================\n\n  on(event, listener) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(listener);\n  }\n\n  off(event, listener) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // ===============================\n  // LIFECYCLE METHODS\n  // ===============================\n\n  disconnect() {\n    if (this.ws) {\n      this.isConnected = false;\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n      console.log('👋 Disconnected from WebSocket Data Server');\n    }\n  }\n\n  isReady() {\n    return this.isConnected && this.clientId;\n  }\n\n  getStatus() {\n    return {\n      connected: this.isConnected,\n      clientId: this.clientId,\n      platform: this.platform,\n      capabilities: this.platformCapabilities,\n      subscriptions: Array.from(this.subscriptions.keys()),\n      pendingRequests: this.pendingRequests.size\n    };\n  }\n}\n\n// ===============================\n// PLATFORM-SPECIFIC EXPORTS\n// ===============================\n\n// React/React Native ES6 export\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WebSocketDataClient;\n}\n\n// Browser AMD/UMD support\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return WebSocketDataClient;\n  });\n}\n\n// Browser global\nif (typeof window !== 'undefined') {\n  window.WebSocketDataClient = WebSocketDataClient;\n}\n\n// Note: For React Native/ES6 projects, you can use:\n// import WebSocketDataClient from './WebSocketDataClient';"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}